"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var fs = __importStar(require("fs-extra"));
var os_1 = require("os");
var constants_1 = require("../constants");
var config_parser_1 = require("./config-parser");
var LicenseFormatter = /** @class */ (function () {
    function LicenseFormatter(defaultFormat, trailingWhitespace, declaredFormats) {
        this.licenseFormats = this.separateFileTypesInFormat(constants_1.DEFAULT_FORMATS);
        if (declaredFormats) {
            this.licenseFormats = Object.assign(this.licenseFormats, this.separateFileTypesInFormat(declaredFormats));
        }
        this.defaultFormat = defaultFormat;
        this.stripTrailingWhitespace = trailingWhitespace === config_parser_1.TrailingWhitespaceMode.TRIM;
    }
    LicenseFormatter.prototype.formatLicenseForFile = function (extension, licenseText) {
        var _this = this;
        var format = this.defaultFormat;
        licenseText = licenseText.trim();
        if (this.licenseFormats.hasOwnProperty(extension)) {
            format = this.licenseFormats[extension];
        }
        if (format.hasOwnProperty('file')) {
            return fs.readFileSync(format.file).toString(); // formatted license was just value in the file
        }
        if (format.hasOwnProperty('eachLine')) {
            licenseText = licenseText.split(/\r\n|\n/).map(function (line) {
                if (format.eachLine.hasOwnProperty('prepend')) {
                    line = format.eachLine.prepend + line;
                }
                if (format.eachLine.hasOwnProperty('append')) {
                    line = line + format.eachLine.append;
                }
                if (_this.stripTrailingWhitespace) {
                    line = line.replace(/\s+$/, '');
                }
                return line;
            }).join(os_1.EOL);
        }
        if (format.hasOwnProperty('prepend')) {
            licenseText = format.prepend + os_1.EOL + licenseText;
        }
        if (format.hasOwnProperty('append')) {
            licenseText = licenseText + os_1.EOL + format.append;
        }
        return licenseText;
    };
    LicenseFormatter.prototype.separateFileTypesInFormat = function (formats) {
        var separated = {};
        Object.keys(formats).forEach(function (key) {
            var splitKey = key.split('|');
            splitKey.forEach(function (fileType) {
                separated['.' + fileType] = formats[key];
            });
        });
        return separated;
    };
    return LicenseFormatter;
}());
exports.LicenseFormatter = LicenseFormatter;
//# sourceMappingURL=license-formatter.js.map