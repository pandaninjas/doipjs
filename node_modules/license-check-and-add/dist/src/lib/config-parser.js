"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var fs = __importStar(require("fs-extra"));
var path = __importStar(require("path"));
var constants_1 = require("../constants");
var TrailingWhitespaceMode;
(function (TrailingWhitespaceMode) {
    TrailingWhitespaceMode[TrailingWhitespaceMode["DEFAULT"] = 0] = "DEFAULT";
    TrailingWhitespaceMode[TrailingWhitespaceMode["TRIM"] = 1] = "TRIM";
})(TrailingWhitespaceMode = exports.TrailingWhitespaceMode || (exports.TrailingWhitespaceMode = {}));
var REQUIRED_FIELDS = ['license'];
function configParser(filePath) {
    var fileConfig = fs.readJSONSync(filePath);
    for (var _i = 0, REQUIRED_FIELDS_1 = REQUIRED_FIELDS; _i < REQUIRED_FIELDS_1.length; _i++) {
        var REQUIRED_FIELD = REQUIRED_FIELDS_1[_i];
        if (!fileConfig.hasOwnProperty(REQUIRED_FIELD)) {
            throw new Error('Missing required field in config: ' + REQUIRED_FIELD);
        }
    }
    var config = {
        defaultFormat: fileConfig.defaultFormat || constants_1.DEFAULT_FORMAT,
        ignore: [],
        ignoreDefaultIgnores: fileConfig.ignoreDefaultIgnores || false,
        license: fs.readFileSync(path.resolve(process.cwd(), fileConfig.license)).toString(),
        licenseFormats: fileConfig.licenseFormats || {},
        trailingWhitespace: TrailingWhitespaceMode.DEFAULT,
    };
    if (!fileConfig.ignore) {
        console.debug('No ignore specified. Using []');
        config.ignore = [];
    }
    else {
        config.ignore = fileConfig.ignore;
    }
    if (!fileConfig.defaultFormat) {
        console.warn("No default format specified. Using " + JSON.stringify(constants_1.DEFAULT_FORMAT) + " as backup");
    }
    if (fileConfig.trailingWhitespace && fileConfig.trailingWhitespace.toUpperCase() === 'TRIM') {
        config.trailingWhitespace = TrailingWhitespaceMode.TRIM;
    }
    if (fileConfig.output) {
        config.output = path.resolve(process.cwd(), fileConfig.output);
    }
    return config;
}
exports.configParser = configParser;
//# sourceMappingURL=config-parser.js.map