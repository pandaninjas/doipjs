"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var chai = __importStar(require("chai"));
var mockery = __importStar(require("mockery"));
var path = __importStar(require("path"));
var sinon = __importStar(require("sinon"));
var sinon_chai_1 = __importDefault(require("sinon-chai"));
var constants_1 = require("../constants");
var config_parser_1 = require("./config-parser");
var expect = chai.expect;
chai.use(sinon_chai_1.default);
describe('#ConfigParser', function () {
    var sandbox;
    var fsReadJSONStub;
    var fsReadFileStub;
    var mockConfig;
    var configParser;
    before(function () {
        mockery.enable({
            warnOnReplace: false,
            warnOnUnregistered: false,
        });
    });
    beforeEach(function () {
        sandbox = sinon.createSandbox();
        mockConfig = {
            license: 'LICENSE.txt',
        };
        fsReadJSONStub = sandbox.stub().returns(mockConfig);
        fsReadFileStub = sandbox.stub().returns('some license');
        mockery.registerMock('fs-extra', { readJSONSync: fsReadJSONStub, readFileSync: fsReadFileStub });
        delete require.cache[require.resolve('./config-parser')];
        configParser = require('./config-parser').configParser;
    });
    afterEach(function () {
        sandbox.restore();
        mockery.deregisterAll();
    });
    after(function () {
        mockery.disable();
    });
    it('should throw an error when missing license from input JSON', function () {
        delete mockConfig.license;
        expect(function () {
            configParser('some/file/path');
        }).to.throw('Missing required field in config: license');
        expect(fsReadJSONStub).to.have.been.calledOnceWithExactly('some/file/path');
    });
    it('should handle when minimum required fields are passed', function () {
        var config = configParser('some/file/path');
        expect(config).deep.equal({
            defaultFormat: constants_1.DEFAULT_FORMAT,
            ignore: [],
            ignoreDefaultIgnores: false,
            license: 'some license',
            licenseFormats: {},
            trailingWhitespace: config_parser_1.TrailingWhitespaceMode.DEFAULT,
        });
        expect(fsReadJSONStub).to.have.been.calledOnceWithExactly('some/file/path');
        expect(fsReadFileStub).to.have.been.calledOnceWithExactly(path.resolve(process.cwd(), 'LICENSE.txt'));
    });
    it('should handle when ignore is an array', function () {
        mockConfig.ignore = ['**/*.js', '**/*.html'];
        var config = configParser('some/file/path');
        expect(config).deep.equal({
            defaultFormat: constants_1.DEFAULT_FORMAT,
            ignore: mockConfig.ignore,
            ignoreDefaultIgnores: false,
            license: 'some license',
            licenseFormats: {},
            trailingWhitespace: config_parser_1.TrailingWhitespaceMode.DEFAULT,
        });
        expect(fsReadJSONStub).to.have.been.calledOnceWithExactly('some/file/path');
        expect(fsReadFileStub).to.have.been.calledOnceWithExactly(path.resolve(process.cwd(), 'LICENSE.txt'));
    });
    it('should handle when ignore is a file', function () {
        mockConfig.ignore = 'some/ignore/file';
        var config = configParser('some/file/path');
        expect(config).deep.equal({
            defaultFormat: constants_1.DEFAULT_FORMAT,
            ignore: 'some/ignore/file',
            ignoreDefaultIgnores: false,
            license: 'some license',
            licenseFormats: {},
            trailingWhitespace: config_parser_1.TrailingWhitespaceMode.DEFAULT,
        });
        expect(fsReadJSONStub).to.have.been.calledOnceWithExactly('some/file/path');
        expect(fsReadFileStub).to.have.been.calledOnceWithExactly(path.resolve(process.cwd(), 'LICENSE.txt'));
    });
    it('should use specified default format', function () {
        mockConfig.defaultFormat = {
            append: '###',
            prepend: '###',
        };
        var config = configParser('some/file/path');
        expect(config).deep.equal({
            defaultFormat: mockConfig.defaultFormat,
            ignore: [],
            ignoreDefaultIgnores: false,
            license: 'some license',
            licenseFormats: {},
            trailingWhitespace: config_parser_1.TrailingWhitespaceMode.DEFAULT,
        });
        expect(fsReadJSONStub).to.have.been.calledOnceWithExactly('some/file/path');
        expect(fsReadFileStub).to.have.been.calledOnceWithExactly(path.resolve(process.cwd(), 'LICENSE.txt'));
    });
    it('should handle when trailing whitespace set but not to trim', function () {
        mockConfig.trailingWhitespace = 'NOT trim';
        var config = configParser('some/file/path');
        expect(config).deep.equal({
            defaultFormat: constants_1.DEFAULT_FORMAT,
            ignore: [],
            ignoreDefaultIgnores: false,
            license: 'some license',
            licenseFormats: {},
            trailingWhitespace: config_parser_1.TrailingWhitespaceMode.DEFAULT,
        });
        expect(fsReadJSONStub).to.have.been.calledOnceWithExactly('some/file/path');
        expect(fsReadFileStub).to.have.been.calledOnceWithExactly(path.resolve(process.cwd(), 'LICENSE.txt'));
    });
    it('should handle when trailing whitespace set to trim', function () {
        mockConfig.trailingWhitespace = 'trIm';
        var config = configParser('some/file/path');
        expect(config).deep.equal({
            defaultFormat: constants_1.DEFAULT_FORMAT,
            ignore: [],
            ignoreDefaultIgnores: false,
            license: 'some license',
            licenseFormats: {},
            trailingWhitespace: config_parser_1.TrailingWhitespaceMode.TRIM,
        });
        expect(fsReadJSONStub).to.have.been.calledOnceWithExactly('some/file/path');
        expect(fsReadFileStub).to.have.been.calledOnceWithExactly(path.resolve(process.cwd(), 'LICENSE.txt'));
    });
    it('should handle when output specified', function () {
        mockConfig.output = 'some/output/path';
        var config = configParser('some/file/path');
        expect(config).deep.equal({
            defaultFormat: constants_1.DEFAULT_FORMAT,
            ignore: [],
            ignoreDefaultIgnores: false,
            license: 'some license',
            licenseFormats: {},
            output: path.resolve(process.cwd(), 'some/output/path'),
            trailingWhitespace: config_parser_1.TrailingWhitespaceMode.DEFAULT,
        });
        expect(fsReadJSONStub).to.have.been.calledOnceWithExactly('some/file/path');
        expect(fsReadFileStub).to.have.been.calledOnceWithExactly(path.resolve(process.cwd(), 'LICENSE.txt'));
    });
});
//# sourceMappingURL=config-parser.spec.js.map