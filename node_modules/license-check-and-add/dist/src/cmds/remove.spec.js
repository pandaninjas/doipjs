"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var chai = __importStar(require("chai"));
var mockery = __importStar(require("mockery"));
var sinon = __importStar(require("sinon"));
var sinon_chai_1 = __importDefault(require("sinon-chai"));
var constants_1 = require("../constants");
var license_manager_1 = require("../lib/license-manager");
var utils_1 = require("./utils");
var expect = chai.expect;
chai.use(sinon_chai_1.default);
describe('#RemoveCommand', function () {
    var sandbox;
    var manageLicenseStub;
    var MockeryRemoveCommand;
    before(function () {
        mockery.enable({
            warnOnReplace: false,
            warnOnUnregistered: false,
        });
    });
    beforeEach(function () {
        sandbox = sinon.createSandbox();
        manageLicenseStub = sandbox.stub();
        mockery.registerMock('./utils', { manageLicense: manageLicenseStub, addExports: utils_1.addExports });
        delete require.cache[require.resolve('./remove.ts')];
        MockeryRemoveCommand = require('./remove.ts');
    });
    afterEach(function () {
        sandbox.restore();
        mockery.deregisterAll();
    });
    after(function () {
        mockery.disable();
    });
    describe('builder', function () {
        it('should configure yargs', function () {
            var yargs = {
                options: sinon.stub(),
                usage: sinon.stub(),
            };
            var returned = MockeryRemoveCommand.builder(yargs);
            expect(returned).to.deep.equal(yargs);
            expect(yargs.options).to.have.been.calledOnceWithExactly(constants_1.OPTIONS);
            expect(yargs.usage).to.have.been.calledOnceWithExactly('license-check-and-add remove');
        });
    });
    describe('handler', function () {
        it('should manage license', function () {
            MockeryRemoveCommand.handler('some args');
            expect(manageLicenseStub).to.have.been.calledOnceWithExactly('some args', license_manager_1.ManagementMode.REMOVE);
        });
    });
});
//# sourceMappingURL=remove.spec.js.map