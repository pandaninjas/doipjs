"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var chai = __importStar(require("chai"));
var childProcess = __importStar(require("child_process"));
var fs = __importStar(require("fs-extra"));
var path = __importStar(require("path"));
var expect = chai.expect;
describe('#Scenario', function () {
    var packageJson = fs.readJSONSync(path.resolve(__dirname, '../package.json'));
    var pwd = process.cwd();
    var tmp = '/tmp/license-check-and-add';
    var bin = path.resolve(__dirname, '..', packageJson.bin['license-check-and-add']);
    var config = path.resolve(__dirname, 'license-check-and-add-config.json');
    before(function () {
        fs.copySync(path.resolve(__dirname, 'original-files'), tmp);
        process.chdir(tmp);
    });
    after(function () {
        process.chdir(pwd);
        fs.removeSync(tmp);
    });
    describe('Check licenses', function () {
        console.log("node " + bin + " check -f " + config);
        it('should check licenses', function () {
            expect(function () {
                childProcess.execSync("node " + bin + " check -f " + config);
            }).to.throw(/4 file\(s\) did not have the license/);
        });
    });
    describe('Insert licenses', function () {
        it('should insert the license into those without', function () {
            var goalFilesDir = path.resolve(__dirname, 'goal-files/insert');
            var stdout = childProcess.execSync("node " + bin + " add -f " + config).toString();
            // tslint:disable-next-line: no-unused-expression
            expect(directoriesMatch(tmp, goalFilesDir)).to.be.true;
            expect(stdout).to.match(/Inserted license into 4 file\(s\)/);
        });
    });
    describe('Remove licenses', function () {
        it('should remove the license from those with', function () {
            var goalFilesDir = path.resolve(__dirname, 'goal-files/remove');
            var stdout = childProcess.execSync("node " + bin + " remove -f " + config).toString();
            // tslint:disable-next-line: no-unused-expression
            expect(directoriesMatch(tmp, goalFilesDir)).to.be.true;
            expect(stdout).to.match(/Removed license from 5 file\(s\)/);
        });
    });
});
function directoriesMatch(original, goal) {
    return fs.readdirSync(original).every(function (fileOrDir) {
        var fullPath = path.resolve(original, fileOrDir);
        var goalPath = path.resolve(goal, fileOrDir);
        if (fs.lstatSync(fullPath).isDirectory()) {
            return directoriesMatch(fullPath, goalPath);
        }
        return fs.readFileSync(fullPath).toString() === fs.readFileSync(goalPath).toString();
    });
}
//# sourceMappingURL=integration-tests.spec.js.map